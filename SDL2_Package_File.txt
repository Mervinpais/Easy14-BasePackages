{
  "packageName": "SDL2",
  "files": [
{
  "Type": "cs",
  "FileName": "ClearWindow.cs",
  "Content": "//_params = windowLong, colorString\r\n\r\npublic static class SDL2_clearScreen\r\n{\r\n    public static void Interperate(long window, string color = \"darkgrey\")\r\n    {\r\n        IntPtr window_intPtr = (IntPtr)window;\r\n        IntPtr renderer = SDL.SDL_GetRenderer(window_intPtr);\r\n\r\n        SDL.SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);\r\n\r\n        //Make a case for the color\r\n        switch (color)\r\n        {\r\n            case \"red\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255); break;\r\n            case \"green\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 0, 255, 0, 255); break;\r\n            case \"blue\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 0, 0, 255, 255); break;\r\n            case \"yellow\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 255, 255, 0, 255); break;\r\n            case \"black\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255); break;\r\n            case \"white\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 255, 255, 255, 255); break;\r\n            case \"purple\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 0, 128, 255); break;\r\n            case \"orange\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 255, 165, 0, 255); break;\r\n            case \"brown\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 165, 42, 42, 255); break;\r\n            case \"grey\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 128, 128, 255); break;\r\n            case \"darkgrey\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 64, 64, 64, 255); break;\r\n            case \"lightgrey\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 192, 192, 192, 255); break;\r\n            case \"darkgreen\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 0, 128, 0, 255); break;\r\n            case \"darkblue\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 0, 0, 128, 255); break;\r\n            case \"darkred\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 0, 0, 255); break;\r\n            case \"darkyellow\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 128, 0, 255); break;\r\n            case \"darkpurple\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 0, 128, 255); break;\r\n            case \"darkorange\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 128, 0, 255); break;\r\n            case \"darkbrown\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 0, 0, 255); break;\r\n            case \"lightgreen\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 0, 128, 128, 255); break;\r\n            case \"lightblue\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 0, 128, 128, 255); break;\r\n            case \"lightred\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 0, 0, 255); break;\r\n            case \"lightyellow\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 128, 0, 255); break;\r\n            case \"lightpurple\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 0, 128, 255); break;\r\n            case \"lightorange\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 128, 0, 255); break;\r\n            case \"lightbrown\":\r\n                SDL.SDL_SetRenderDrawColor(renderer, 128, 0, 0, 255); break;\r\n        }\r\n\r\n        //Clear the GUI\r\n        SDL.SDL_RenderClear(renderer);\r\n\r\n        //Update the GUI\r\n        SDL.SDL_RenderPresent(renderer);\r\n    }\r\n}\r\n\r\nlong window = 0;\r\nstring color = null;\r\n\r\nwindow = (long)windowLong;\r\ncolor = colorString;\r\nSDL2_clearScreen.Interperate(window, color);\r\n"
},
{
  "Type": "cs",
  "FileName": "CreateShape.cs",
  "Content": "//_params = windowLong, Xpos, Ypos, sizeX, sizeY\r\n\r\npublic static class SDL2_createShape\r\n{\r\n    public static void Interperate(long window, int x, int y, int w, int h)\r\n    {\r\n        IntPtr window_intPtr = (IntPtr)window;\r\n        try\r\n        {\r\n            IntPtr renderer = SDL.SDL_GetRenderer(window_intPtr);\r\n            SDL.SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);\r\n            // Draws a point at (20, 20) using the currently set color.\r\n            SDL.SDL_RenderDrawPoint(renderer, 150, 150);\r\n            // Specify the coordinates for our rectangle we will be drawing.\r\n            var rect = new SDL.SDL_Rect\r\n            {\r\n                x = x,\r\n                y = y,\r\n                w = w,\r\n                h = h\r\n            };\r\n\r\n            SDL.SDL_SetRenderDrawColor(renderer, 135, 206, 235, 255);\r\n\r\n            // Set the color to red before drawing our shape\r\n            SDL.SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);\r\n\r\n            // Draw a filled in rectangle.\r\n            SDL.SDL_RenderFillRect(renderer, ref rect);\r\n\r\n            SDL.SDL_RenderPresent(renderer);\r\n        }\r\n        catch (Exception)\r\n        {\r\n            Console.ForegroundColor = ConsoleColor.Red;\r\n            ConsolePrint.Interperate(\"Unspecified Error; No Renderer found!\");\r\n            Console.ResetColor();\r\n        }\r\n    }\r\n}\r\n\r\nlong window = 0;\r\nint xPosition = int.MaxValue;\r\nint yPosition = int.MaxValue;\r\nint width = int.MaxValue;\r\nint height = int.MaxValue;\r\n\r\nxPosition = Xpos;\r\nyPosition = Ypos;\r\nwidth = sizeX;\r\nheight = sizeY;\r\nwindow = (long)windowLong;\r\n\r\nnew Task(() => { SDL2_createShape.Interperate(window, xPosition, yPosition, width, height); }).Start();\r\n"
},
{
  "Type": "cs",
  "FileName": "CreateWindow.cs",
  "Content": "//_params = posX,posY,sizeX,sizeY,title\r\n\r\npublic static class SDL2_makeWindow\r\n{\r\n    static IntPtr window;\r\n    static IntPtr renderer;\r\n\r\n    public static void Setup(int sizeX = 200, int sizeY = 200, int posX = SDL.SDL_WINDOWPOS_UNDEFINED, int posY = SDL.SDL_WINDOWPOS_UNDEFINED, string title = \"myWindow\")\r\n    {\r\n        // Initilizes SDL.\r\n        if (SDL.SDL_Init(SDL.SDL_INIT_VIDEO) < 0)\r\n        {\r\n            Console.WriteLine($\"There was an issue initializing SDL. {SDL.SDL_GetError()}\");\r\n        }\r\n\r\n        // Create a new window given a title, size, and passes it a flag indicating it should be shown.\r\n        window = SDL.SDL_CreateWindow(\r\n            title,\r\n            posX,\r\n            posY,\r\n            sizeX,\r\n            sizeY,\r\n            SDL.SDL_WindowFlags.SDL_WINDOW_SHOWN\r\n        );\r\n\r\n        if (window == IntPtr.Zero)\r\n        {\r\n            Console.WriteLine($\"There was an issue creating the window. {SDL.SDL_GetError()}\");\r\n        }\r\n\r\n        // Creates a new SDL hardware renderer using the default graphics device with VSYNC enabled.\r\n        renderer = SDL.SDL_CreateRenderer(\r\n            window,\r\n            -1,\r\n            SDL.SDL_RendererFlags.SDL_RENDERER_ACCELERATED |\r\n            SDL.SDL_RendererFlags.SDL_RENDERER_PRESENTVSYNC);\r\n\r\n        if (renderer == IntPtr.Zero)\r\n        {\r\n            Console.WriteLine($\"There was an issue creating the renderer. {SDL.SDL_GetError()}\");\r\n        }\r\n        Console.ForegroundColor = ConsoleColor.DarkGray;\r\n        Console.WriteLine($\"\\nWindow \\\"{window}\\\" was created and shown\");\r\n        Console.ResetColor();\r\n        Console.WriteLine(\"\");\r\n    }\r\n\r\n    static string PollEvents(bool running = true)\r\n    {\r\n        // Check to see if there are any events and continue to do so until the queue is empty.\r\n        while (SDL.SDL_PollEvent(out SDL.SDL_Event e) == 1)\r\n        {\r\n            //Console.WriteLine(e.type);\r\n            if (e.type == SDL.SDL_EventType.SDL_WINDOWEVENT && e.window.windowEvent == SDL.SDL_WindowEventID.SDL_WINDOWEVENT_CLOSE)\r\n            {\r\n                // ... Handle window close for each window ...\r\n                // Note, you can also check e.window.windowID to check which\r\n                // of your windows the event came from.\r\n                // e.g.:\r\n                if (SDL.SDL_GetWindowID(window) == e.window.windowID)\r\n                {\r\n                    // ... close window A ...\r\n                    running = false;\r\n                    return \"<QUIT>\";\r\n                }\r\n            }\r\n        }\r\n        return \"<?>\";\r\n    }\r\n\r\n    static void Render(byte red = 30, byte green = 30, byte blue = 30, byte alpha = 255)\r\n    {\r\n        // Sets the color that the screen will be cleared with.\r\n        SDL.SDL_SetRenderDrawColor(renderer, red, green, blue, alpha);\r\n\r\n        // Clears the current render surface.\r\n        SDL.SDL_RenderClear(renderer);\r\n\r\n        /*\r\n        // Set the color to red before drawing our shape\r\n        SDL.SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);\r\n\r\n        // Draw a line from top left to bottom right\r\n        DL.SDL_RenderDrawLine(renderer, 0, 0, 640, 480);\r\n        */\r\n\r\n        // Switches out the currently presented render surface with the one we just did work on.\r\n        SDL.SDL_RenderPresent(renderer);\r\n    }\r\n\r\n    static void CleanUp()\r\n    {\r\n        SDL.SDL_DestroyRenderer(renderer);\r\n        SDL.SDL_DestroyWindow(window);\r\n        //SDL.SDL_Quit();\r\n    }\r\n\r\n    public static long Interperate(int sizeX = 200, int sizeY = 200, int posX = SDL.SDL_WINDOWPOS_UNDEFINED, int posY = SDL.SDL_WINDOWPOS_UNDEFINED, string title = \"myWindow\", byte red = 30, byte green = 30, byte blue = 30, byte alpha = 255)\r\n    {\r\n        if (sizeX < 1)\r\n        {\r\n            sizeX = 200;\r\n        }\r\n        else if (sizeY < 1)\r\n        {\r\n            sizeY = 200;\r\n        }\r\n        else if (posX < 0)\r\n        {\r\n            posX = SDL.SDL_WINDOWPOS_UNDEFINED;\r\n        }\r\n        else if (posY < 0)\r\n        {\r\n            posY = SDL.SDL_WINDOWPOS_UNDEFINED;\r\n        }\r\n        else if (title == null)\r\n        {\r\n            title = \"myWindow\";\r\n        }\r\n        else if (red < 0 || red > 225)\r\n        {\r\n            red = 30;\r\n        }\r\n        else if (green < 0 || green > 225)\r\n        {\r\n            green = 30;\r\n        }\r\n        else if (blue < 0 || blue > 225)\r\n        {\r\n            blue = 30;\r\n        }\r\n        else if (alpha < 0 || alpha > 100)\r\n        {\r\n            alpha = 255;\r\n        }\r\n\r\n        Setup(sizeX, sizeY, posX, posY, title);\r\n        Render(red, green, blue, alpha);\r\n        bool running = true;\r\n        while (running)\r\n        {\r\n            string polledEvents = PollEvents();\r\n            if (polledEvents == \"<QUIT>\") running = false;\r\n        }\r\n\r\n        CleanUp();\r\n        long window_long = Convert.ToInt64(Convert.ToString(window), 16);\r\n        return window_long;\r\n    }\r\n}\r\n\r\nIntPtr window = IntPtr.Zero;\r\nlong window_int = -1;\r\nnew Task(() => { window_int = SDL2_makeWindow.Interperate(sizeX, sizeY, posX, posY, title); }).Start();\r\nwindow = (IntPtr)window_int;\r\nSDL.SDL_SetWindowTitle(window, title != null ? $\"{title.ToString()} - {window_int}\" : $\"E14 SDL2 Window - {window_int}\");\r\n"
}
]
}
